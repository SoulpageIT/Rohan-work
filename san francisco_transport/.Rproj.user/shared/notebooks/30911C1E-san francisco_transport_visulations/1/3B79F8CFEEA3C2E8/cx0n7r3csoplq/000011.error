{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"function (x, ...) \nUseMethod(\"print\")(x)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"print.htmlwidget(x)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"htmlwidgets:::toHTML(x, standalone = TRUE, knitrOptions = knitrOptions)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"htmltools::tagList(container(htmltools::tagList(x$prepend, widget_html(name = class(x)[1], \n    package = attr(x, \"package\"), id = id, style = style, class = paste(class(x)[1], \n        \"html-widget\"), width = sizeInfo$width, height = sizeInfo$height), \n    x$append)), widget_data(x, id), if (!is.null(sizeInfo$runtime)) { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"widget_data(x, id)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"toJSON(createPayload(x))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"createPayload(x)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"instance$preRenderHook(instance)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"plotly_build.plotly(instance)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"Map(function(x, y) {\n    dat <- plotly_data(p, y)\n    trace <- structure(rapply(x, eval_attr, data = dat, how = \"list\"), \n        class = oldClass(x)) ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"mapply(FUN = f, ..., SIMPLIFY = FALSE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (x, y) \n{\n    dat <- plotly_data(p, y)\n    trace <- structure(rapply(x, eval_attr, data = dat, how = \"list\"),  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"arrange_safe(builtData, c(\".plotlyTraceIndex\", \".plotlyGroupIndex\", \n    if (inherits(trace, \"plotly_line\")) \"x\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"dplyr::arrange_(data, .dots = vars)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"arrange_.tbl_df(data, .dots = vars)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"arrange_impl(.data, dots)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(structure(list(message = \"Evaluation error: `as_dictionary()` is defunct as of rlang 0.3.0.\\nPlease use `as_data_pronoun()` instead.\", \n    call = arrange_impl(.data, dots), cppstack = NULL), .Names = c(\"message\", \n\"call\", \"cppstack\"), class = c(\"Rcpp::eval_error\", \"C++Error\", \n\"error\", \"condition\")))","line_number":0}],"message":"Error in arrange_impl(.data, dots) : \n  Evaluation error: `as_dictionary()` is defunct as of rlang 0.3.0.\nPlease use `as_data_pronoun()` instead.\n"}