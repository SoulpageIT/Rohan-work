unique(xgbpred)
xgbpred <- ifelse (xgbpred >= 0.5,1,0)
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
unique(xgbpred)
table(xgbpred)
confusionMatrix(as.factor(train_encoded$Delay_1),as.factor(xgbpred),positive = "1")
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
model<- xgb.load('xgb.model')
xgbpred <- predict (model,dtestfinal,type = "class")
xgbpred <- ifelse (xgbpred >= 0.5,1,0)
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
graphConfusionMatrix(43031,215,16413,312)
#used for reading and subsetting the data
library(data.table)
#used for converting the format of the date column
library(lubridate)
#used for plotting graphs
library(ggplot2)
library(plotly)
#used for smote function to do under sampling and over sampling
library(DMwR)
#The library for cross validation
library(caret)
library(mlbench)
#decision tree model building packages
library(rpart)
#decision tree plotting packages
library(RColorBrewer)
library(rattle)
#The package for random forest function
library(MASS)
library(randomForest)
#packages for xgboost
library(xgboost)
library(Matrix)
library(readr)
library(car)
#For one hot encode function
library(mltools)
#library for ROC curve
library(ROCR)
library(car)
#library for summarise function
library(dplyr)
#This Library is used for reading Excel file.
library(readxl)
#For calculating the Geo distance.
library(geosphere)
#Here i am reading all the training data from different files.
#Reading the 2016 data of origin airport Dallas.
train<-fread("2016_city1.csv",skip = 7,nrows = 5526,stringsAsFactors = TRUE,drop = c("V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30"))
#Adding the origin airport column.
train$OriginAirPort<-as.factor("Dallas")
#Reading the 2016 data of origin airport NewYork.
train1<-fread("2016_city2.csv",stringsAsFactors = TRUE)
#Adding the origin airport column.
train1$OriginAirPort<-as.factor("NewYork")
#Joining the 2016 data by rows.
train<-rbind(setDT(train), setDT(train1), fill=TRUE)
#Reading the 2017 data of origin airport Dallas.
train1<-fread("2017_city1.csv",stringsAsFactors = TRUE)
#Adding the origin airport column.
train1$OriginAirPort<-as.factor("Dallas")
#joining this data to train data.
train<-rbind(setDT(train), setDT(train1), fill=TRUE)
#Reading the 2017 data of origin airport NewYork
train1<-fread("2017_city2.csv",stringsAsFactors = TRUE)
train1$OriginAirPort<-as.factor("NewYork")
#Binding the above read data to train data.
train<-rbind(setDT(train), setDT(train1), fill=TRUE)
#Now removing the unwanted duplicate data.table from the r session
rm(train1)
#Here i am reading all the testing data from the different files.
#Reading the 2018 data of origin airport NewYork
test<-fread("2018_city_2_test.csv",stringsAsFactors = TRUE)
#Adding the Origin airport column.
test$OriginAirPort<-as.factor("NewYork")
#Reading the 2018 data of origin Dallas.
test1<-fread("2018_city_one_test.csv",stringsAsFactors = TRUE)
#Adding the Origin airport column.
test1$OriginAirPort<-as.factor("Dallas")
#Here i am combinig two data.tables by rows and creating new table test.
test<-rbind(setDT(test), setDT(test1), fill=TRUE)
#Now removing the unwanted duplicate data.table from the r session
rm(test1)
#Checking the NA 'S at entire data set of train and test
cat("The Number of NA 'S at Training data set: ", sum(train=="na"))
cat("\nThe Number of NA 'S at Testing  data set: ", sum(is.na(train=="na")))
#checking for the empty sells in the table
cat("\nThe Number of blank cell 'S at Training data set: ", sum(train==""))
cat("\nThe Number of blank cell 'S at Testing  data set: ", sum(test==""))
apply(train,2,function(x)sum(x==""))
#This command is use to see all the empty rows.
train[`Tail Number`==""]
setkey(train,`Tail Number`)
train<-train[!""]
#Checking the NA 'S at entire data set of train and test
cat("The Number of blank cells  at Training data set: ", sum(train==""))
lat_long<-as.data.table(read_excel("Lat_Long.xlsx"))
#converting string column as factor.
lat_long$Destination<-as.factor(lat_long$Destination)
#subsetting the data of NewYork
NewYork<-train[OriginAirPort=="NewYork"]
#Adding the columns
NewYork$`Start Station Longitude`<- -73.8630
NewYork$`Start Station Latitude`<- 40.7636
NewYork <- merge(NewYork,lat_long,by.x ="Destination Airport",by.y = "Destination")
NewYork[,distance := round(distHaversine(matrix(c(`Start Station Longitude`,`Start Station Latitude`), ncol = 2),matrix(c(Long,Lat),ncol = 2),r=6378137),2)]
#subsetting the data of NewYork.
Dallas<-train[OriginAirPort=="Dallas"]
#Adding the columns Longitude and Latitude.
Dallas$`Start Station Longitude`<- -96.9830
Dallas$`Start Station Latitude`<- 32.9614
Dallas <- merge(Dallas,lat_long,by.x ="Destination Airport",by.y = "Destination")
Dallas[,distance := round(distHaversine(matrix(c(`Start Station Longitude`,`Start Station Latitude`), ncol = 2),matrix(c(Long,Lat),ncol = 2),r=6378137),2)]
train<-rbind(setDT(NewYork), setDT(Dallas), fill=TRUE)
#Now  removing unwanted data.tables from our analysis.
rm(NewYork)
rm(Dallas)
train[ ,`:=`(`Flight Number` = NULL, `Destination Airport` = NULL,`Carrier Code`= NULL,`Tail Number`= NULL,`Start Station Longitude`=NULL,`Start Station Latitude`=NULL,Lat=NULL,Long=NULL,OriginAirPort=NULL)]
#here i am seing the structure of train data set
str(train)
#Now converting the date column.
#we found 2 date format in data
mdy <- mdy(train$`Date (MM/DD/YYYY)`)
dmy <- dmy(train$`Date (MM/DD/YYYY)`)
mdy[is.na(mdy)] <- dmy[is.na(mdy)] # some dates are ambiguous, here we give
train$`Date (MM/DD/YYYY)`<- mdy # mdy precedence over dmy
#Now we are dividing Scheduled departure time column to scheduled_departure_time_hours and scheduled_departure_time_minutes
train$`Scheduled departure time hours`<-hour(strptime(train$`Scheduled departure time`, format = '%H:%M', 'GMT'))
train$`Scheduled departure time minutes`<-minute(strptime(train$`Scheduled departure time`,format = '%H:%M', 'GMT'))
#Now we are dividing Actual departure time departure time column to Actual_departure_time_hours and Actual_departure_time_minutes
train$`Actual departure time hours`<-hour(strptime(train$`Actual departure time`, format = '%H:%M', 'GMT'))
train$`Actual departure time minutes`<-minute(strptime(train$`Actual departure time`,format = '%H:%M', 'GMT'))
#Now removing the original Scheduled departure time column
train$`Scheduled departure time`<-NULL
#Now removing the actual departure time column
train$`Actual departure time`<-NULL
#Now removing the wheels of time as its not useful at model building.
train$`Wheels-off time`<-NULL
#this command is use to extract months
train$months<-as.factor(month(train$`Date (MM/DD/YYYY)`))
#this command is used to extract weekdays
train$weekDays<-as.factor(weekdays(train$`Date (MM/DD/YYYY)`))
#Removing Date column
#train$`Date (MM/DD/YYYY)`<-NULL
indx <- setNames( rep(c('winter', 'spring', 'summer',
'fall'),each=3), c(c(12,1,2),c(3,4,5),c(6,7,8),c(9,10,11)))
train[,seasons := as.factor(unname(indx[as.character(month(train$`Date (MM/DD/YYYY)`))]))]
train$years<-as.factor(year(train$`Date (MM/DD/YYYY)`))
train_2016<-train[years=="2016"]
#extracting day
train_2016$day<-as.factor(day(train_2016$`Date (MM/DD/YYYY)`))
#Inserting the holiday column.
train_2016$Holiday<-as.factor(ifelse((train_2016$months == "1" & train_2016$weekDays=="Friday" & train_2016$day=="1") | (train_2016$months == "1" & train_2016$weekDays=="Monday" & train_2016$day=="18") | (train_2016$months == "2" & train_2016$weekDays=="Monday" & train_2016$day=="15") | (train_2016$months == "4" & train_2016$weekDays=="Friday" & train_2016$day=="15") |(train_2016$months == "5" & train_2016$weekDays=="Sunday" & train_2016$day=="8") |(train_2016$months == "5" & train_2016$weekDays=="Monday" & train_2016$day=="30") |(train_2016$months == "6" & train_2016$weekDays=="Sunday" & train_2016$day=="19") |(train_2016$months == "7" & train_2016$weekDays=="Monday" & train_2016$day=="4") |(train_2016$months == "9" & train_2016$weekDays=="Monday" & train_2016$day=="5") |(train_2016$months == "10" & train_2016$weekDays=="Monday" & train_2016$day=="10") |(train_2016$months == "11" & train_2016$weekDays=="Friday" & train_2016$day=="11") |(train_2016$months == "11" & train_2016$weekDays=="Thursday" & train_2016$day=="24") |(train_2016$months == "11" & train_2016$weekDays=="Friday" & train_2016$day=="25") |(train_2016$months == "12" & train_2016$weekDays=="Monday" & train_2016$day=="26")== TRUE,1,0))
train_2017<-train[years=="2017"]
#extracting day
train_2017$day<-as.factor(day(train_2017$`Date (MM/DD/YYYY)`))
#Inserting the holiday column.
train_2017$Holiday <- as.factor(ifelse((train_2017$months == "1" & train_2017$weekDays=="Monday" & train_2017$day=="2") | (train_2017$months == "1" & train_2017$weekDays=="Monday" & train_2017$day=="16") | (train_2017$months == "2" & train_2017$weekDays=="Monday" & train_2017$day=="20") | (train_2017$months == "4" & train_2017$weekDays=="Monday" & train_2017$day=="17") |(train_2017$months == "5" & train_2017$weekDays=="Sunday" & train_2017$day=="14") |(train_2017$months == "5" & train_2017$weekDays=="Monday" & train_2017$day=="29") |(train_2017$months == "6" & train_2017$weekDays=="Sunday" & train_2017$day=="18") |(train_2017$months == "7" & train_2017$weekDays=="Tuesday" & train_2017$day=="4") |(train_2017$months == "9" & train_2017$weekDays=="Monday" & train_2017$day=="4") |(train_2017$months == "10" & train_2017$weekDays=="Monday" & train_2017$day=="9") |(train_2017$months == "11" & train_2017$weekDays=="Friday" & train_2017$day=="10") |(train_2017$months == "11" & train_2017$weekDays=="Saturday" & train_2017$day=="11") |(train_2017$months == "11" & train_2017$weekDays=="Monday" & train_2017$day=="13") |(train_2017$months == "11" & train_2017$weekDays=="Thursday" & train_2017$day=="23")|(train_2017$months == "11" & train_2017$weekDays=="Friday" & train_2017$day=="24")|(train_2017$months == "12" & train_2017$weekDays=="Monday" & train_2017$day=="25") == TRUE,1,0))
train<-rbind(setDT(train_2016), setDT(train_2017), fill=TRUE)
#removing unwanted data set
rm(train_2016)
rm(train_2017)
train[,DayCycle:=as.factor( ifelse(
`Scheduled departure time hours` >= 5 & `Scheduled departure time hours`<=11 , 'Morning',
ifelse(`Scheduled departure time hours` >= 12 & `Scheduled departure time hours`<=16,'Noon' ,
ifelse(`Scheduled departure time hours` >= 17 & `Scheduled departure time hours`<=19, 'Evening',
"Night"   )
)
)
)
]
#creating the target variable which is categorical variable.
train$Delay<-as.factor(ifelse((train$`Actual elapsed time (Minutes)`- train$`Scheduled elapsed time (Minutes)`)+train$`Departure delay (Minutes)` <= 0,0,1))
train$years<-NULL
train$day<-NULL
train$`Date (MM/DD/YYYY)`<-NULL
#subsetting the data of NewYork
NewYork<-test[OriginAirPort=="NewYork"]
#Adding the columns
NewYork$`Start Station Longitude`<- -73.8630
NewYork$`Start Station Latitude`<- 40.7636
NewYork <- merge(NewYork,lat_long,by.x ="Destination Airport",by.y = "Destination")
NewYork[,distance := round(distHaversine(matrix(c(`Start Station Longitude`,`Start Station Latitude`), ncol = 2),matrix(c(Long,Lat),ncol = 2),r=6378137),2)]
#subsetting the data of NewYork
NewYork<-test[OriginAirPort=="NewYork"]
#Adding the columns
NewYork$`Start Station Longitude`<- -73.8630
NewYork$`Start Station Latitude`<- 40.7636
NewYork <- merge(NewYork,lat_long,by.x ="Destination Airport",by.y = "Destination")
NewYork[,distance := round(distHaversine(matrix(c(`Start Station Longitude`,`Start Station Latitude`), ncol = 2),matrix(c(Long,Lat),ncol = 2),r=6378137),2)]
#subsetting the data of NewYork.
Dallas<-test[OriginAirPort=="Dallas"]
#Adding the columns Longitude and Latitude.
Dallas$`Start Station Longitude`<- -96.9830
Dallas$`Start Station Latitude`<- 32.9614
Dallas <- merge(Dallas,lat_long,by.x ="Destination Airport",by.y = "Destination")
Dallas[,distance := round(distHaversine(matrix(c(`Start Station Longitude`,`Start Station Latitude`), ncol = 2),matrix(c(Long,Lat),ncol = 2),r=6378137),2)]
test<-rbind(setDT(NewYork), setDT(Dallas), fill=TRUE)
#Now  removing unwanted data.tables from our analysis.
rm(NewYork)
rm(Dallas)
test[ ,`:=`(`Flight Number` = NULL, `Destination Airport` = NULL,`Carrier Code`= NULL,`Tail Number`= NULL,`Start Station Longitude`=NULL,`Start Station Latitude`=NULL,Lat=NULL,Long=NULL,OriginAirPort=NULL)]
#we found 2 date format in data
mdy <- mdy(test$`Date (MM/DD/YYYY)`)
dmy <- dmy(test$`Date (MM/DD/YYYY)`)
mdy[is.na(mdy)] <- dmy[is.na(mdy)] # some dates are ambiguous, here we give
test$`Date (MM/DD/YYYY)`<- mdy        # mdy precedence over dmy
#Now we are dividing Scheduled departure time column to scheduled_departure_time_hours and scheduled_departure_time_minutes
test$`Scheduled departure time hours`<-hour(strptime(test$`Scheduled departure time`, format = '%H:%M', 'GMT'))
test$`Scheduled departure time minutes`<-minute(strptime(test$`Scheduled departure time`,format = '%H:%M', 'GMT'))
#Now we are dividing Actual departure time departure time column to Actual_departure_time_hours and Actual_departure_time_minutes
test$`Actual departure time hours`<-hour(strptime(test$`Actual departure time`, format = '%H:%M', 'GMT'))
test$`Actual departure time minutes`<-minute(strptime(test$`Actual departure time`,format = '%H:%M', 'GMT'))
#Now removing the original Scheduled departure time column
test$`Scheduled departure time`<-NULL
#Now removing the actual departure time column
test$`Actual departure time`<-NULL
#Now removing the wheels of time as its not useful at model building.
test$`Wheels-off time`<-NULL
#this command is use to extract months
test$months<-as.factor(month(test$`Date (MM/DD/YYYY)`))
#this command is used to extract weekdays
test$weekDays<-as.factor(weekdays(test$`Date (MM/DD/YYYY)`))
indx <- setNames( rep(c('winter', 'spring', 'summer',
'fall'),each=3), c(c(12,1,2),c(3,4,5),c(6,7,8),c(9,10,11)))
test[,seasons := as.factor(unname(indx[as.character(month(test$`Date (MM/DD/YYYY)`))]))]
test$day<-day(test$`Date (MM/DD/YYYY)`)
#Inserting the holiday column.
test$Holiday<-as.factor(ifelse((test$months == "1" & test$weekDays=="Monday" & test$day=="1") | (test$months == "1" & test$weekDays=="Monday" & test$day=="15") | (test$months == "2" & test$weekDays=="Monday" & test$day=="19") | (test$months == "3" & test$weekDays=="Saturday" & test$day=="31") |(test$months == "5" & test$weekDays=="Monday" & test$day=="28") |(test$months == "7" & test$weekDays=="Wednesday" & test$day=="4") |(test$months == "9" & test$weekDays=="Monday" & test$day=="3") |(test$months == "11" & test$weekDays=="Monday" & test$day=="12") |(test$months == "11" & test$weekDays=="Thursday" & test$day=="22") |(test$months == "11" & test$weekDays=="Friday" & test$day=="23") |(test$months == "12" & test$weekDays=="Tuesday" & test$day=="25")== TRUE,1,0))
test[,DayCycle:=as.factor( ifelse(
`Scheduled departure time hours` >= 5 & `Scheduled departure time hours`<=11 , 'Morning',
ifelse(`Scheduled departure time hours` >= 12 & `Scheduled departure time hours`<=16,'Noon' ,
ifelse(`Scheduled departure time hours` >= 17 & `Scheduled departure time hours`<=19, 'Evening',
"Night"   )
)
)
)
]
#creating the target variable which is categorical variable.
test$Delay<-as.factor(ifelse((test$`Actual elapsed time (Minutes)`- test$`Scheduled elapsed time (Minutes)`)+test$`Departure delay (Minutes)` <= 0,0,1))
#Removing Date column
test$`Date (MM/DD/YYYY)`<-NULL
#Removing day column
test$day<-NULL
#Donet chart which display the percentage of each class in the column
p <- train %>%
group_by(Delay) %>%
summarize(count = n()) %>%
plot_ly(labels = ~Delay, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "The Percentage of category at Delay column",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
#Removing from traing data
train$`Actual elapsed time (Minutes)`<-NULL
train$`Departure delay (Minutes)`<-NULL
train$`Scheduled elapsed time (Minutes)`<-NULL
#Removing from testing data
test$`Actual elapsed time (Minutes)`<-NULL
test$`Departure delay (Minutes)`<-NULL
test$`Scheduled elapsed time (Minutes)`<-NULL
Total<-rbind(setDT(train), setDT(test), fill=TRUE)
#Encoding the training data set
Total_encoded<-one_hot(Total)
Total_encoded$Delay_0<-NULL
dtrain <- xgb.DMatrix(as.matrix(Total_encoded[,-"Delay_1"]), label = as.matrix(Total_encoded$Delay_1))
#dtestfinal<-xgb.DMatrix(as.matrix(test_encoded[,-"Delay_1"]), label = as.matrix(test_encoded$Delay_1))
#default parameters
params <- list(booster = "gbtree", objective = "binary:logistic", eta=0.2, max_depth=4, min_child_weight=2, subsample=1, colsample_bytree=1)
#find best nround
cv<-xgb.cv( params = params, data = dtrain, nrounds = 1000, nfold = 5,gamma=0, showsd = T, stratified = T, print.every.n = 10, early.stop.round = 20, maximize = F)
cv$best_iteration
print(cv)
print(cv, verbose=TRUE)
#first default - model training
xgb1 <- xgb.train (params = params, data = dtrain, nrounds = 327, watchlist = list(train=dtrain), print.every.n = 10, early.stop.round = 10, maximize = F , eval_metric = "error")
xgb.save(xgb1, 'xgb_all_data.model')
#bst <- xgb.load('xgb.model')
#pred <- predict(bst, test$data)
#used for reading and subsetting the data
library(data.table)
library(purrr)
#used for converting the format of the date column
library(lubridate)
#used for plotting graphs
library(ggplot2)
library(plotly)
#used for smote function to do under sampling and over sampling
library(DMwR)
#The library for cross validation
library(caret)
library(mlbench)
#decision tree model building packages
library(rpart)
#decision tree plotting packages
library(RColorBrewer)
library(rattle)
#The package for random forest function
library(MASS)
library(randomForest)
#packages for xgboost
library(xgboost)
library(Matrix)
library(readr)
library(car)
#For one hot encode function
library(mltools)
#library for ROC curve
library(ROCR)
library(car)
#library for summarise function
library(dplyr)
#This Library is used for reading Excel file.
library(readxl)
#For calculating the Geo distance.
library(geosphere)
#data<-fread("Detailed_Statistics_Departures.csv",skip = 7,stringsAsFactors = TRUE)
Total_data<-
list.files(pattern = "*.csv") %>%
map_df(~fread(.,skip = 7,stringsAsFactors = TRUE))
#Checking the NA 'S at entire data set of train and test
cat("The Number of NA 'S in the data: ", sum(Total_data=="na"))
#checking for the empty sells in the table
cat("\nThe Number of blank cell 'S in the data: ", sum(Total_data==""))
apply(Total_data,2,function(x)sum(x==""))
#This command is use to see all the empty rows.
Total_data[`Tail Number`==""]
setkey(Total_data,`Tail Number`)
Total_data<-Total_data[!""]
#Checking the NA 'S at entire data set of train and test
cat("The Number of blank cells  at Training data set: ", sum(Total_data==""))
lat_long<-as.data.table(read_excel("Lat_Long.xlsx"))
#converting string column as factor.
lat_long$Destination<-as.factor(lat_long$Destination)
#Adding the columns
Total_data$`Start Station Longitude`<- -73.8630
Total_data$`Start Station Latitude`<- 40.7636
Total_data<- merge(Total_data,lat_long,by.x ="Destination Airport",by.y = "Destination")
Total_data[,distance := round(distHaversine(matrix(c(`Start Station Longitude`,`Start Station Latitude`), ncol = 2),matrix(c(Long,Lat),ncol = 2),r=6378137),2)]
Total_data[ ,`:=`(`Flight Number` = NULL, `Destination Airport` = NULL,`Carrier Code`= NULL,`Tail Number`= NULL,`Start Station Longitude`=NULL,`Start Station Latitude`=NULL,Lat=NULL,Long=NULL)]
#Now converting the date column.
#we found 2 date format in data
mdy <- mdy(Total_data$`Date (MM/DD/YYYY)`)
dmy <- dmy(Total_data$`Date (MM/DD/YYYY)`)
mdy[is.na(mdy)] <- dmy[is.na(mdy)] # some dates are ambiguous, here we give
Total_data$`Date (MM/DD/YYYY)`<- mdy # mdy precedence over dmy
#Now we are dividing Scheduled departure time column to scheduled_departure_time_hours and scheduled_departure_time_minutes
Total_data$`Scheduled departure time hours`<-hour(strptime(Total_data$`Scheduled departure time`, format = '%H:%M', 'GMT'))
Total_data$`Scheduled departure time minutes`<-minute(strptime(Total_data$`Scheduled departure time`,format = '%H:%M', 'GMT'))
#Now we are dividing Actual departure time departure time column to Actual_departure_time_hours and Actual_departure_time_minutes
Total_data$`Actual departure time hours`<-hour(strptime(Total_data$`Actual departure time`, format = '%H:%M', 'GMT'))
Total_data$`Actual departure time minutes`<-minute(strptime(Total_data$`Actual departure time`,format = '%H:%M', 'GMT'))
#Now removing the original Scheduled departure time column
Total_data$`Scheduled departure time`<-NULL
#Now removing the actual departure time column
Total_data$`Actual departure time`<-NULL
#Now removing the wheels of time as its not useful at model building.
Total_data$`Wheels-off time`<-NULL
#this command is use to extract months
Total_data$months<-as.factor(month(Total_data$`Date (MM/DD/YYYY)`))
#this command is used to extract weekdays
Total_data$weekDays<-as.factor(weekdays(Total_data$`Date (MM/DD/YYYY)`))
#Removing Date column
#train$`Date (MM/DD/YYYY)`<-NULL
indx <- setNames( rep(c('winter', 'spring', 'summer',
'fall'),each=3), c(c(12,1,2),c(3,4,5),c(6,7,8),c(9,10,11)))
Total_data[,seasons := as.factor(unname(indx[as.character(month(Total_data$`Date (MM/DD/YYYY)`))]))]
Total_data$years<-as.factor(year(Total_data$`Date (MM/DD/YYYY)`))
train_2016<-Total_data[years=="2016"]
#extracting day
train_2016$day<-as.factor(day(train_2016$`Date (MM/DD/YYYY)`))
#Inserting the holiday column.
train_2016$Holiday<-as.factor(ifelse((train_2016$months == "1" & train_2016$weekDays=="Friday" & train_2016$day=="1") | (train_2016$months == "1" & train_2016$weekDays=="Monday" & train_2016$day=="18") | (train_2016$months == "2" & train_2016$weekDays=="Monday" & train_2016$day=="15") | (train_2016$months == "4" & train_2016$weekDays=="Friday" & train_2016$day=="15") |(train_2016$months == "5" & train_2016$weekDays=="Sunday" & train_2016$day=="8") |(train_2016$months == "5" & train_2016$weekDays=="Monday" & train_2016$day=="30") |(train_2016$months == "6" & train_2016$weekDays=="Sunday" & train_2016$day=="19") |(train_2016$months == "7" & train_2016$weekDays=="Monday" & train_2016$day=="4") |(train_2016$months == "9" & train_2016$weekDays=="Monday" & train_2016$day=="5") |(train_2016$months == "10" & train_2016$weekDays=="Monday" & train_2016$day=="10") |(train_2016$months == "11" & train_2016$weekDays=="Friday" & train_2016$day=="11") |(train_2016$months == "11" & train_2016$weekDays=="Thursday" & train_2016$day=="24") |(train_2016$months == "11" & train_2016$weekDays=="Friday" & train_2016$day=="25") |(train_2016$months == "12" & train_2016$weekDays=="Monday" & train_2016$day=="26")== TRUE,1,0))
train_2017<-Total_data[years=="2017"]
#extracting day
train_2017$day<-as.factor(day(train_2017$`Date (MM/DD/YYYY)`))
#Inserting the holiday column.
train_2017$Holiday <- as.factor(ifelse((train_2017$months == "1" & train_2017$weekDays=="Monday" & train_2017$day=="2") | (train_2017$months == "1" & train_2017$weekDays=="Monday" & train_2017$day=="16") | (train_2017$months == "2" & train_2017$weekDays=="Monday" & train_2017$day=="20") | (train_2017$months == "4" & train_2017$weekDays=="Monday" & train_2017$day=="17") |(train_2017$months == "5" & train_2017$weekDays=="Sunday" & train_2017$day=="14") |(train_2017$months == "5" & train_2017$weekDays=="Monday" & train_2017$day=="29") |(train_2017$months == "6" & train_2017$weekDays=="Sunday" & train_2017$day=="18") |(train_2017$months == "7" & train_2017$weekDays=="Tuesday" & train_2017$day=="4") |(train_2017$months == "9" & train_2017$weekDays=="Monday" & train_2017$day=="4") |(train_2017$months == "10" & train_2017$weekDays=="Monday" & train_2017$day=="9") |(train_2017$months == "11" & train_2017$weekDays=="Friday" & train_2017$day=="10") |(train_2017$months == "11" & train_2017$weekDays=="Saturday" & train_2017$day=="11") |(train_2017$months == "11" & train_2017$weekDays=="Monday" & train_2017$day=="13") |(train_2017$months == "11" & train_2017$weekDays=="Thursday" & train_2017$day=="23")|(train_2017$months == "11" & train_2017$weekDays=="Friday" & train_2017$day=="24")|(train_2017$months == "12" & train_2017$weekDays=="Monday" & train_2017$day=="25") == TRUE,1,0))
Total_data1<-rbind(setDT(train_2016), setDT(train_2017), fill=TRUE)
#removing unwanted data set
rm(train_2016)
rm(train_2017)
test<-Total_data[years=="2018"]
test$day<-day(test$`Date (MM/DD/YYYY)`)
#Inserting the holiday column.
test$Holiday<-as.factor(ifelse((test$months == "1" & test$weekDays=="Monday" & test$day=="1") | (test$months == "1" & test$weekDays=="Monday" & test$day=="15") | (test$months == "2" & test$weekDays=="Monday" & test$day=="19") | (test$months == "3" & test$weekDays=="Saturday" & test$day=="31") |(test$months == "5" & test$weekDays=="Monday" & test$day=="28") |(test$months == "7" & test$weekDays=="Wednesday" & test$day=="4") |(test$months == "9" & test$weekDays=="Monday" & test$day=="3") |(test$months == "11" & test$weekDays=="Monday" & test$day=="12") |(test$months == "11" & test$weekDays=="Thursday" & test$day=="22") |(test$months == "11" & test$weekDays=="Friday" & test$day=="23") |(test$months == "12" & test$weekDays=="Tuesday" & test$day=="25")== TRUE,1,0))
Total_data1<-rbind(setDT(Total_data1), setDT(test), fill=TRUE)
test<-Total_data[years=="2019"]
test$day<-day(test$`Date (MM/DD/YYYY)`)
#Inserting the holiday column.
test$Holiday<-as.factor(ifelse((test$months == "1" & test$weekDays=="Monday" & test$day=="1") | (test$months == "1" & test$weekDays=="Monday" & test$day=="21") | (test$months == "2" & test$weekDays=="Monday" & test$day=="18") | (test$months == "5" & test$weekDays=="Monday" & test$day=="27") |(test$months == "7" & test$weekDays=="Thursday" & test$day=="4") |(test$months == "9" & test$weekDays=="Monday" & test$day=="2") |(test$months == "10" & test$weekDays=="Monday" & test$day=="14") |(test$months == "11" & test$weekDays=="Monday" & test$day=="11") |(test$months == "11" & test$weekDays=="Thursday" & test$day=="28") |(test$months == "12" & test$weekDays=="Wednesday" & test$day=="25") |(test$months == "2" & test$weekDays=="Saturday" & test$day=="2")|(test$months == "2" & test$weekDays=="Thursday" & test$day=="14")|(test$months == "3" & test$weekDays=="Sunday" & test$day=="17")|(test$months == "4" & test$weekDays=="Monday" & test$day=="15")|(test$months == "4" & test$weekDays=="Friday" & test$day=="19")|(test$months == "4" & test$weekDays=="Sunday" & test$day=="21")|(test$months == "5" & test$weekDays=="Sunday" & test$day=="5")|(test$months == "5" & test$weekDays=="Sunday" & test$day=="12")|(test$months == "6" & test$weekDays=="Sunday" & test$day=="16")|(test$months == "10" & test$weekDays=="Thursday" & test$day=="31")|(test$months == "11" & test$weekDays=="Friday" & test$day=="29")== TRUE,1,0))
Total_data<-rbind(setDT(Total_data1), setDT(test), fill=TRUE)
rm(Total_data1)
Total_data[,DayCycle:=as.factor( ifelse(
`Scheduled departure time hours` >= 5 & `Scheduled departure time hours`<=11 , 'Morning',
ifelse(`Scheduled departure time hours` >= 12 & `Scheduled departure time hours`<=16,'Noon' ,
ifelse(`Scheduled departure time hours` >= 17 & `Scheduled departure time hours`<=19, 'Evening',
"Night"   )
)
)
)
]
#creating the target variable which is categorical variable.
Total_data$Delay<-as.factor(ifelse((Total_data$`Actual elapsed time (Minutes)`- Total_data$`Scheduled elapsed time (Minutes)`)+Total_data$`Departure delay (Minutes)` <= 0,0,1))
Total_2018<-Total_data
Total_2018$years<-NULL
Total_2018$day<-NULL
Total_2018$`Date (MM/DD/YYYY)`<-NULL
rm(test)
#Removing from traing data
Total_2018$`Actual elapsed time (Minutes)`<-NULL
Total_2018$`Departure delay (Minutes)`<-NULL
Total_2018$`Scheduled elapsed time (Minutes)`<-NULL
#Parameter for the function.
#parameter 1 :- Number of correct predictions for class 0
#parameter 2 :- Number of wrong predictions for class 0
#parameter 3 :- Number of correct predictions for class 1
#parameter 4 :- Number of wrong predictions for class 1
graphConfusionMatrix<-function(correct_class_a,wrong_class_a,correct_class_b,wrong_class_b){
#Creating the data for the plot.
x <- data.frame("About_results" = c("Correct_Prediction","Wrong_Prediction"), "Values" = c(correct_class_a,wrong_class_a))
y <- data.frame("About_results" = c("Correct_Prediction","Wrong_Prediction"), "Values" = c(correct_class_b,wrong_class_b))
#ploting the graph.
p <- plot_ly() %>%
add_pie(data = count(x,About_results), labels = ~About_results, values =x$Values ,
name = "class 0", domain = list(row = 0, column = 0)) %>%
add_pie(data = count(y,About_results), labels = ~About_results, values = y$Values,
name = "class 1", domain = list(row = 0, column = 1)) %>%
layout(title = "Visualization Of Confusion Matrix",showlegend = T,
grid=list(rows=1, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Displaying the graphs
p
#removing unwanted dataframes.
#rm(x)
#rm(y)
}
names(Total_2018) <- make.names(names(Total_2018))
#Encoding the  data set
Total_data_encoded<-one_hot(Total_2018)
Total_data_encoded$Delay_0<-NULL
dtestfinal<-xgb.DMatrix(as.matrix(Total_data_encoded[,-"Delay_1"]), label = as.matrix(Total_data_encoded$Delay_1))
model<- xgb.load('xgb_all_data.model')
xgbpred <- predict (model,dtestfinal,type = "class")
unique(xgbpred)
xgbpred <- ifelse (xgbpred >= 0.5,1,0)
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
xgbpred <- predict (model,dtestfinal,type = "class")
ROCpred<-prediction(xgbpred,Total_data_encoded$Delay_1)
ROCperf<-performance(ROCpred,"tpr","fpr")
plot(ROCperf,col="blue",print.cutoffs.at=seq(0.1,by=0.1,text.adj=c(-0.2,1.7),cex=0.7))
xgbpred <- ifelse (xgbpred >= 0.5,1,0)
ROCpred<-prediction(xgbpred,Total_data_encoded$Delay_1)
ROCperf<-performance(ROCpred,"tpr","fpr")
plot(ROCperf,col="blue",print.cutoffs.at=seq(0.1,by=0.1,text.adj=c(-0.2,1.7),cex=0.7))
xgbpred <- predict (model,dtestfinal,type = "class")
graphConfusionMatrix(200490,21952,91499,27903)
xgbpred <- predict (model,dtestfinal,type = "class")
xgbpred <- ifelse (xgbpred >= 0.9,1,0)
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
graphConfusionMatrix(200490,21952,91499,27903)
ROCpred<-prediction(xgbpred,Total_data_encoded$Delay_1)
ROCperf<-performance(ROCpred,"tpr","fpr")
plot(ROCperf,col="blue",print.cutoffs.at=seq(0.1,by=0.1,text.adj=c(-0.2,1.7),cex=0.7))
graphConfusionMatrix(218568,3874,78568, 40834)
xgbpred <- ifelse (xgbpred >= 0.5,1,0)
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
xgbpred <- predict (model,dtestfinal,type = "class")
xgbpred <- ifelse (xgbpred >= 0.5,1,0)
confusionMatrix(as.factor(Total_data_encoded$Delay_1),as.factor(xgbpred),positive = "1")
graphConfusionMatrix(200490 ,21952, 91499,27903)
#used for reading and subsetting the data
library(data.table)
library(purrr)
#used for converting the format of the date column
library(lubridate)
#used for plotting graphs
library(ggplot2)
library(plotly)
#used for smote function to do under sampling and over sampling
library(DMwR)
#The library for cross validation
library(caret)
library(mlbench)
#decision tree model building packages
library(rpart)
#decision tree plotting packages
library(RColorBrewer)
library(rattle)
#The package for random forest function
library(MASS)
library(randomForest)
#packages for xgboost
library(xgboost)
library(Matrix)
library(readr)
library(car)
#For one hot encode function
library(mltools)
#library for ROC curve
library(ROCR)
library(car)
#library for summarise function
library(dplyr)
#This Library is used for reading Excel file.
library(readxl)
#For calculating the Geo distance.
library(geosphere)
