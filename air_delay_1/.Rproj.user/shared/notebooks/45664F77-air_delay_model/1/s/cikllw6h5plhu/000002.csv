"0","#find best nround"
"0","cv<-xgb.cv( params = params, data = dtrain, nrounds = 1000, nfold = 5,gamma=0, showsd = T, stratified = T, print.every.n = 10, early.stop.round = 20, maximize = F)"
"2","'print.every.n' is deprecated.
Use 'print_every_n' instead.
See help(""Deprecated"") and help(""xgboost-deprecated"")."
"2","'early.stop.round' is deprecated.
Use 'early_stopping_rounds' instead.
See help(""Deprecated"") and help(""xgboost-deprecated"")."
"1","[1]	train-error:0.112195+0.000324	test-error:0.112195+0.001296"
"1"," "
"1","
"
"1","Multiple eval metrics are present. Will use "
"1","test_error"
"1"," for early stopping.
"
"1","Will train until "
"1","test_error"
"1"," hasn't improved in "
"1","20"
"1"," rounds.

"
"1","[11]	train-error:0.106999+0.000631	test-error:0.107203+0.001542"
"1"," "
"1","
"
"1","[21]	train-error:0.104002+0.000285	test-error:0.104371+0.001101"
"1"," "
"1","
"
"1","[31]	train-error:0.102181+0.000294	test-error:0.102575+0.001232"
"1"," "
"1","
"
"1","[41]	train-error:0.099991+0.000706	test-error:0.101198+0.001048"
"1"," "
"1","
"
"1","[51]	train-error:0.098639+0.001070	test-error:0.099831+0.001124"
"1"," "
"1","
"
"1","[61]	train-error:0.096267+0.000614	test-error:0.098476+0.001227"
"1"," "
"1","
"
"1","[71]	train-error:0.095115+0.000834	test-error:0.098046+0.000984"
"1"," "
"1","
"
"1","[81]	train-error:0.092788+0.000555	test-error:0.096140+0.000793"
"1"," "
"1","
"
"1","[91]	train-error:0.091887+0.000525	test-error:0.095501+0.001157"
"1"," "
"1","
"
"1","[101]	train-error:0.090160+0.000347	test-error:0.093925+0.001291"
"1"," "
"1","
"
"1","[111]	train-error:0.088485+0.000626	test-error:0.092945+0.001206"
"1"," "
"1","
"
"1","[121]	train-error:0.087262+0.000530	test-error:0.092206+0.001304"
"1"," "
"1","
"
"1","[131]	train-error:0.086485+0.000718	test-error:0.091644+0.001228"
"1"," "
"1","
"
"1","[141]	train-error:0.085369+0.000581	test-error:0.091027+0.001124"
"1"," "
"1","
"
"1","[151]	train-error:0.084270+0.000297	test-error:0.090311+0.001734"
"1"," "
"1","
"
"1","[161]	train-error:0.083694+0.000348	test-error:0.090047+0.001748"
"1"," "
"1","
"
"1","[171]	train-error:0.083129+0.000195	test-error:0.089793+0.001617"
"1"," "
"1","
"
"1","[181]	train-error:0.082424+0.000205	test-error:0.089408+0.001666"
"1"," "
"1","
"
"1","[191]	train-error:0.081675+0.000270	test-error:0.088835+0.001448"
"1"," "
"1","
"
"1","[201]	train-error:0.081085+0.000305	test-error:0.088647+0.001376"
"1"," "
"1","
"
"1","[211]	train-error:0.080670+0.000342	test-error:0.088449+0.001620"
"1"," "
"1","
"
"1","[221]	train-error:0.080284+0.000288	test-error:0.088107+0.001533"
"1"," "
"1","
"
"1","[231]	train-error:0.079843+0.000373	test-error:0.088074+0.001579"
"1"," "
"1","
"
"1","[241]	train-error:0.079281+0.000312	test-error:0.087711+0.001074"
"1"," "
"1","
"
"1","[251]	train-error:0.078843+0.000127	test-error:0.087699+0.001149"
"1"," "
"1","
"
"1","[261]	train-error:0.078524+0.000162	test-error:0.087435+0.001148"
"1"," "
"1","
"
"1","[271]	train-error:0.078229+0.000202	test-error:0.087182+0.001155"
"1"," "
"1","
"
"1","[281]	train-error:0.077923+0.000269	test-error:0.087171+0.001514"
"1"," "
"1","
"
"1","[291]	train-error:0.077601+0.000236	test-error:0.087303+0.001389"
"1"," "
"1","
"
"1","[301]	train-error:0.077237+0.000277	test-error:0.087039+0.001426"
"1"," "
"1","
"
"1","[311]	train-error:0.076884+0.000226	test-error:0.087050+0.001655"
"1"," "
"1","
"
"1","[321]	train-error:0.076510+0.000210	test-error:0.086840+0.001421"
"1"," "
"1","
"
"1","[331]	train-error:0.076287+0.000209	test-error:0.086752+0.001389"
"1"," "
"1","
"
"1","[341]	train-error:0.076091+0.000187	test-error:0.086708+0.001228"
"1"," "
"1","
"
"1","Stopping. Best iteration:
"
"1","[327]	train-error:0.076334+0.000157	test-error:0.086697+0.001176"
"1","

"
"0","cv$best_iteration"
"1","[1]"
"1"," 327"
"1","
"
"0","print(cv)"
"1","##### xgb.cv "
"1","5"
"1","-folds
"
